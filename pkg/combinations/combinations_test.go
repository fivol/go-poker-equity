package combinations

import (
	"fmt"
	"go-poker-tools/pkg/types"
	"testing"
)

func TestCombinations(t *testing.T) {
	table := []struct {
		board    string
		hand     string
		comb     string
		noCombos string
	}{
		{
			"As2sKs",
			"5s4s",
			"flush",
			"",
		},
		{
			"3s4c5d",
			"7d6s",
			"straight",
			"",
		},
		{
			"Kc7s2s",
			"KdKh",
			"top_set",
			"",
		},
		{
			"Ks7s2s",
			"2h2c",
			"medium_set",
			"",
		},
		{
			"Ks7s2s",
			"7h7c",
			"medium_set",
			"",
		},
		{
			"AsKs6s",
			"AcKd",
			"top_two_pairs",
			"",
		},
		{
			"AsKs6s",
			"Ac6d",
			"medium_two_pairs",
			"",
		},
		{
			"AsKs6s",
			"Kc6d",
			"medium_two_pairs",
			"",
		},
		{
			"QsJsTs",
			"KdKs",
			"overpair_oesd",
			"",
		},
		{
			"JsTs9s",
			"KdKs",
			"overpair_gsh",
			"",
		},
		{
			"2s3s8s",
			"QsQd",
			"high_overpair",
			"",
		},
		{
			"9s8s2s",
			"JdJs",
			"high_overpair",
			"low_overpair",
		},
		{
			"9s8s2s",
			"JdJs",
			"high_overpair",
			"low_overpair",
		},
		{
			"6s2s4s",
			"9d9s",
			"low_overpair",
			"",
		},
		{
			"2s3d4s",
			"7d7s",
			"low_overpair",
			"",
		},
		{
			"9s6s2s",
			"QdQs",
			"high_overpair_fd",
			"",
		},
		{
			"7s6s2s",
			"8d8s",
			"low_overpair_fd",
			"",
		},
		{
			"Qd5s3s",
			"AsQs",
			"tp_fd_nuts_fd",
			"",
		},
		{
			"Qs5s3s",
			"AsQd",
			"tp_fd_nuts_fd",
			"",
		},
		{
			"Qd5s3s",
			"KsQs",
			"tp_fd",
			"",
		},
		{
			"Qd5d3d",
			"Qs7d",
			"tp_fd",
			"",
		},
		{
			"KcJdTs",
			"KsQd",
			"tp_oesd",
			"",
		},
		{
			"KsQcJd",
			"AsKd",
			"tp_gsh",
			"",
		},
		{
			"Js3s2s",
			"AcJd",
			"tp",
			"",
		},
		{
			"As9s3s",
			"JsJd",
			"pocket_tp_2_fd_1_3_nuts",
			"",
		},
		{
			"Ad8d2d",
			"QdQc",
			"pocket_tp_2_fd_1_3_nuts",
			"",
		},
		{
			"As2s3s",
			"6s6d",
			"pocket_tp_2_fd_4_nuts",
			"",
		},
		{
			"Js9d8c",
			"TsTd",
			"pocket_tp_2_oesd",
			"",
		},
		{
			"Js9d7c",
			"TsTd",
			"pocket_tp_2_gsh",
			"",
		},
		{
			"Js9d6c",
			"TsTd",
			"pocket_tp_2",
			"",
		},
		{
			"9s8s2s",
			"As8d",
			"2nd_fd_1_3_nuts",
			"",
		},
		{
			"Kd8dAd",
			"KsJd",
			"2nd_fd_1_3_nuts",
			"",
		},
		{
			"Ts7s2s",
			"8s7d",
			"2nd_fd_4_nuts",
			"",
		},
		{
			"9s7s6d",
			"8s7d",
			"2nd_oesd",
			"",
		},
		{
			"9s7s5d",
			"8s7d",
			"2nd_gsh",
			"",
		},
		{
			"9s7s2d",
			"8s7d",
			"2nd",
			"",
		},
		{
			"AsKs2s",
			"QsQd",
			"pocket_between_2_3_fd_nuts",
			"",
		},
		{
			"AsKs2s",
			"JsJd",
			"pocket_between_2_3_fd_2_3_nuts",
			"",
		},
		{
			"AsKs2s",
			"7s7d",
			"pocket_between_2_3_fd_4_nuts",
			"",
		},
		{
			"KsQcTd",
			"JsJd",
			"pocket_between_2_3_oesd",
			"",
		},
		{
			"KsQc9d",
			"JsJd",
			"pocket_between_2_3_gsh",
			"",
		},
		{
			"KsQc8d",
			"JsJd",
			"pocket_between_2_3",
			"",
		},
		{
			"KsQs3s",
			"As3d",
			"3d_hands_fd_nuts",
			"",
		},
		{
			"KsQs3s",
			"Js3d",
			"3d_hands_fd_2_3_nuts",
			"",
		},
		{
			"KsQs3s",
			"5s3d",
			"3d_hands_fd_4_nuts",
			"",
		},
		{
			"6s4c3h",
			"5s3d",
			"3d_hands_oesd",
			"",
		},
		{
			"3s4s6s",
			"7s3d",
			"3d_hands_gsh",
			"",
		},
		{
			"3s4s8s",
			"7d3d",
			"3d_hands",
			"",
		},
		{
			"AsKsQs",
			"JsJd",
			"under_pocket_fd_1_2_nuts",
			"",
		},
		{
			"AsKdQc",
			"2s2d",
			"under_pocket",
			"",
		},
		{
			"KcTs2d",
			"Ac6d",
			"ahigh",
			"",
		},
		{
			"AsQdKc",
			"5s6d",
			"nomade",
			"",
		},
		{
			"3s2d2c",
			"JsTs",
			"top_cards",
			"",
		},
		{
			"7s3d2c",
			"Td9s",
			"overcards",
			"",
		},
		{
			"6s7sAd",
			"4s5s",
			"fd_oesd_fd_2_cards",
			"",
		},
		{
			"6s8sAd",
			"4s5s",
			"fd_gsh_fd_2_cards",
			"",
		},
		{
			"As7s2s",
			"KsQd",
			"fd_nuts_fd",
			"",
		},
		{
			"AsQs3d",
			"Js2s",
			"fd_2nd_3d_nuts_fd",
			"",
		},
		{
			"As9s3d",
			"QsTs",
			"fd_2nd_3d_nuts_fd",
			"",
		},
		{
			"6s8sTs",
			"5s4d",
			"fd_4_nuts_fd",
			"",
		},
		{
			"JsTc3h",
			"KsQd",
			"good_oesd",
			"",
		},
		{
			"4s5d6c",
			"Ac3d",
			"bad_oesd",
			"",
		},
		{
			"Tc9dQs",
			"8c7c",
			"good_oesd",
			"",
		},
		{
			"Js9d6c",
			"KsQd",
			"good_gutshot",
			"",
		},
		{
			"8s9sJs",
			"As7c",
			"bad_gutshot",
			"",
		},
		{
			"As2s3s",
			"5s4s",
			"straight_flush",
			"",
		},
		{
			"Ac2hKc",
			"2s2d",
			"set",
			"",
		},
		{
			"3c4d7h",
			"JsJd",
			"overpair",
			"",
		},
		{
			"QsTd2c",
			"KcJd",
			"oesd",
			"",
		},
		{
			"AcJc2d",
			"KsQd",
			"gutshot",
			"",
		},
		{
			"4c8c9cTd",
			"Ac3h",
			"fd",
			"",
		},
		{
			"5h5c5d",
			"5s3d",
			"quads",
			"",
		},
		{
			"3c2h3d",
			"2c2d",
			"full_house",
			"",
		},
		{
			"QhQc2d",
			"KcQd",
			"trips",
			"",
		},
	}
	for i, testCase := range table {
		hand := types.ParseHand(testCase.hand)
		board := types.ParseBoard(testCase.board)
		trueComb := testCase.comb
		comb := GetCombinations(board, hand)
		if comb != Comb(trueComb) {
			t.Error(fmt.Sprintf("Test %d, board: %s, hand: %s, %s != %s", i, testCase.board, testCase.hand, comb, trueComb))
			return
		}
	}

}
